{
  "openapi": "3.0.0",
  "paths": {
    "/auth/jwt-siwe": {
      "post": {
        "operationId": "AuthController_verifySIWE",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifySiweDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The JWT token  has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JwtToken"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/user": {
      "get": {
        "operationId": "UsersController_findOne",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "The name has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Users"
        ]
      },
      "post": {
        "operationId": "UsersController_setName",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetNameDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The name has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/user/search": {
      "post": {
        "operationId": "UsersController_searchUserByName",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The name has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/erc20": {
      "get": {
        "operationId": "Erc20Controller_getErc20Balance",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "Owned NFTs has been successfully fetched."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Erc20"
        ]
      }
    },
    "/erc721": {
      "get": {
        "operationId": "Erc721Controller_getOwnedErc721",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "Owned NFTs has been successfully fetched."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Erc721"
        ]
      }
    }
  },
  "info": {
    "title": "Api example",
    "description": "The API description",
    "version": "1.0",
    "contact": {
      
    }
  },
  "tags": [
    
  ],
  "servers": [
    
  ],
  "components": {
    "schemas": {
      "VerifySiweDto": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "EVM address to check against.",
            "example": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266"
          },
          "signature": {
            "type": "string",
            "description": "The signature that was generated by signing the message with the address's signer.",
            "example": "0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c"
          }
        },
        "required": [
          "address",
          "signature"
        ]
      },
      "JwtToken": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "JWT token"
          }
        },
        "required": [
          "access_token"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          
        }
      },
      "SetNameDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "",
            "example": "John Doe"
          }
        },
        "required": [
          "name"
        ]
      },
      "SearchUserDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "",
            "example": "John Doe"
          }
        },
        "required": [
          "name"
        ]
      }
    }
  }
}